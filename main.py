if __name__ == '__main__':
    # a = (1, 2, [1, 4],)  # Создали объект с типом данных кортеж
    # print(id(a))  # Вывели айди объкта
    # a[2].append(3)  # Добавили элемент
    # print(a)  # вывод объекта
    # print(id(a))
    # a = (1, 3, 3, 5, [1, 4],)
    # print(id(a))
    # print(a.count(3))
    # print(a.index(5))

    # d = {}
    # d = {'dict': 1, 'dictionary': 2}  # Во-первых, с помощью литерала:
    # print(d)
    # d = dict(short='dict', long='dictionary')  # Во-вторых, с помощью функции dict:
    # print(d)
    # d = dict([(1, 1), (2, 4)])  # с помощью функции dict:
    # print(d)
    # d = dict.fromkeys(['a', 'b'])  # В-третьих, с помощью метода fromkeys:
    # print(d)
    # d = dict.fromkeys(['a', 'b'], 100)
    # print(d)
    # d = {a: a ** 2 for a in range(7)}  # В-четвертых, с помощью генераторов словарей, которые очень похожи на
    # генераторы списков
    # print(d)

    # d = {"1":1}
    # d['1'] = 2
    # print(d)
    # d.clear()
    # print(d)

    D = {'name': 'Dosoy', 'age': 18}  # Метод copy () возвращает мелкую копию указанного словаря.
    X = D.copy()
    print(X)

    D = dict.fromkeys(['Dosoy', 'Joma'], 'Developer')
    print(D)  # Метод fromkeys () создает новый словарь со значением по умолчанию для всех указанных ключей.
    # Если значение по умолчанию не указано, для всех ключей установлено значение «Нет».

    #  Метод get () возвращает значение ключа, если ключ находится в словаре.
    D = {'name': 'Dosoy', 'age': 18}
    print(D.get('name'))

    # Метод items () возвращает список кортежей, содержащих пары ключ: значение словаря. Первый элемент в каждом кортеже
    # - это ключ, а второй элемент - это связанное с ним значение.
    D = {'name': 'Dosoy', 'age': 18}
    L = D.items()
    print(L)

    # Метод keys () возвращает список ключей из словаря.
    D = {'name': 'Dosoy', 'age': 18}
    L = D.keys()
    print(L)

    D = {'name': 'Dosoy', 'age': 18}
    L = D.keys()
    D['job'] = 'Developer'  # Объект, возвращаемый функцией items (), является объектом представления. Он обеспечивает
    # динамическое представление словарных статей, что означает, что при изменении словаря представление отражает эти
    # изменения.
    print(L)

    # Если указанный ключ находится в словаре, метод pop () удаляет его и возвращает его значение. Вы также можете
    # указать параметр по умолчанию, который будет возвращен, если указанный ключ не будет найден.
    D = {'name': 'Dosoy', 'age': 18}
    D.pop('age')
    print(D)
    D = {'name': 'Dosoy', 'age': 18}
    v = D.pop('age')  # Этот метод не только удаляет указанный ключ, но и возвращает его значение.
    print(v)

    # Метод popitem () удаляет и возвращает последнюю вставленную пару ключ: значение из словаря.
    # Пары возвращаются в порядке LIFO.
    D = {'name': 'Dosoy', 'age': 18, 'job': 'developer'}
    D.popitem()
    print(D)

    # Метод setdefault () возвращает значение ключа, если ключ находится в словаре. Если нет, он вставляет ключ со
    # значением по умолчанию и возвращает значение по умолчанию.
    D = {'name': 'Dosoy', 'age': 18}
    v = D.setdefault('job', 'Dev')
    print(D)
    # print(v)

    # Метод update () обновляет словарь парами ключ: значение из элемента.
    # update () обычно используется для объединения двух словарей.
    D1 = {'name': 'Dosoy'}
    D2 = {'job': 'Dev', 'age': 18}
    D1.update(D2)
    print(D1)
    # Когда два словаря объединяются вместе, существующие ключи обновляются и добавляются новые пары ключ: значение.
    D1 = {'name': 'Dosoy', 'age': 18}
    D2 = {'job': 'Dev', 'age': 27}
    D1.update(D2)
    print(D1)

    # Метод values () возвращает список значений из словаря.
    D = {'name': 'Dosoy', 'age': 18}
    L = D.values()
    print(L)
    # values () обычно используется для перебора всех значений из словаря.
    D = {'name': 'Dosoy', 'age': 18}
    for x in D.values():
        print(x)